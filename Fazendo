import java.util.Scanner;
import java.util.Random;

public class Main {
    static Scanner teclado = new Scanner(System.in);
    static Random numAleatorio = new Random();
    static boolean ordenado;
    static int quantosValoresNoVetor = 0, tamanhoVetor = 5;
    static int comparadorBubble = 0, comparadorSelection = 0, comparadorInsert = 0, comparadorQuick = 0, comparadorBin = 0, comparadorSeq = 0, comparadorRecursivo = 0;
    static int [] vetor = new int[tamanhoVetor];
    public static void main(String[] args) {

        int escolha = -1;

        while (escolha != 0) {
            mostraMenu();
            escolha = teclado.nextInt();

            switch (escolha) {
                case 1 -> zeraVetor();
                case 2 -> insereValor();
                case 3 -> apagaValor();
                case 4 -> consultaValor();
                case 5 -> informaQuantidade();
                case 6 -> falaMaior();
                case 7 -> falaMenor();
                case 8 -> apresentaLista();
                case 9 -> insereAleatorioOrdenado();
                case 10 -> consultaBinario();
                case 11 -> comparaBuscas();
                case 12 -> buscaRecursividade();
                case 13 ->  insereAleatorioNaoOrdenado();
                case 14 -> escolheOrdenacao();
                case 0 -> encerraPrograma();
                default -> System.out.println("\nOpção inválida. Tente novamente\n");

            }
        }
    }

    static void mostraMenu() {
        System.out.println("------------------------------------------------Menu------------------------------------------------");
        System.out.println("1) Criar o vetor vazio ou zerar o vetor");
        System.out.println("2) Inserir um valor no vetor");
        System.out.println("3) Apagar um valor do vetor");
        System.out.println("4) Consultar se existe determinado valor no vetor");
        System.out.println("5) Consultar quantos valores significativos já ocupam o vetor");
        System.out.println("6) Consultar qual o maior valor armazenado no vetor e indicar qual o elemento que contém esse valor");
        System.out.println("7) Consultar qual o menor valor armazenado no vetor e indicar qual o elemento que contém esse valor");
        System.out.println("8) Apresentar uma listagem dos valores armazenados no vetor");
        System.out.println("9) Inserir números aleatórios no vetor (ORDENADO)");
        System.out.println("10) Busca binária");
        System.out.println("11) Consulta comparando as buscas (binária, sequencial e binária com recursividade)");
        System.out.println("12) Busca com recursividade");
        System.out.println("13) Insirir números aleatórios (NÃO ORDENADO)");
        System.out.println("14) Escolha o tipo de ordenação");
        System.out.println("0) Sair do programa");
        System.out.println("----------------------------------------------------------------------------------------------------");
        System.out.print("Escolha: ");
    }

    static void zeraVetor() {
        for (int i = 0; i < tamanhoVetor; i++) {
            vetor[i] = 0;
        }

        quantosValoresNoVetor = 0;
        System.out.println();
        System.out.println(">>>>>>> Vetor zerado com sucesso! <<<<<<");
        System.out.println();

    }

    static void insereValor() {
        if(quantosValoresNoVetor >= tamanhoVetor){
            System.out.println(">>>>>> Vetor completo <<<<<<");
            System.out.println();

        }else {

            for(int i = 0; i < tamanhoVetor; i++){
                System.out.print("Digite o valor a ser inserido no vetor: ");
                vetor[i] = teclado.nextInt();

            }

            quantosValoresNoVetor++;
            System.out.println();
        }
    }

    static void apagaValor() {
        int valorZerado;

        if(quantosValoresNoVetor == 0){
            System.out.println(">>>>>> Não existem valores cadastrados <<<<<<");

        }else {

            System.out.println();
            System.out.print("Selecione a posicao a ser zerada: ");
            valorZerado = teclado.nextInt();

            while (valorZerado > tamanhoVetor || valorZerado < 0) {
                System.out.println("Não existe essa opção, meu chapa");
                System.out.print("Tenta de novo: ");
                valorZerado = teclado.nextInt();
            }

            vetor[valorZerado] = 0;

            quantosValoresNoVetor--;

        }
    }

    static void consultaValor() {
        comparadorSeq = 0;

        int valorConsulta, anotar = 0, posicao = 0;

        if(quantosValoresNoVetor == 0){
            System.out.println("Não existem valores cadastrados");

        }else {

            System.out.println();
            System.out.print("Insira o valor a ser consultado: ");
            valorConsulta = teclado.nextInt();

            for (int i = 0; i < tamanhoVetor; i++) {
                if (valorConsulta != vetor[i]) {
                    comparadorSeq++;

                }else{

                    anotar = 1;
                    posicao = i;

                    i = tamanhoVetor;
                }
            }

            if (anotar == 1) {
                System.out.println("O valor foi cadastrado na posição: " + posicao);

            } else {

                System.out.println("O valor não foi cadastrado");
            }

            System.out.println();
        }
    }

    static void informaQuantidade() {
        quantosValoresNoVetor = 0;
        for (int i = 0; i < tamanhoVetor; i++){
            if(vetor[i] != 0){
                quantosValoresNoVetor++;
            }
        }

        System.out.println();
        System.out.println("Foram cadastrados " + quantosValoresNoVetor + " valores");
        System.out.println();

    }

    static void falaMaior() {
        int maiorValor, valorPosicao = -1;
        maiorValor = Integer.MIN_VALUE;
        System.out.println();

        if(quantosValoresNoVetor == 0){
            System.out.println("Não existem valores cadastrados");

        }else {
            for(int i = 0; i < tamanhoVetor; i++) {
                if (vetor[i] > maiorValor) {
                    maiorValor = vetor[i];
                    valorPosicao = i;
                }
            }

            System.out.println("Maior valor: " + maiorValor + " Posição: " + valorPosicao);
            System.out.println();
        }
    }

    static void falaMenor() {
        int menorValor, valorPosicao = -1;
        menorValor = Integer.MAX_VALUE;
        System.out.println();

        if(quantosValoresNoVetor == 0){
            System.out.println("Não existem valores cadastrados");

        }else {
            for(int i = 0; i < tamanhoVetor; i++) {
                if(vetor[i] < menorValor && vetor[i] != 0) {
                    menorValor = vetor[i];
                    valorPosicao = i;
                }
            }

            System.out.println("Menor valor: " + menorValor + " Posição " + valorPosicao);
            System.out.println();
        }
    }

    static void apresentaLista() {
        System.out.println();
        for (int i = 0; i < tamanhoVetor; i++) {
            System.out.print("[ "+ vetor[i] +" ] ");
        }

        System.out.println();
    }

    static void insereAleatorioOrdenado(){

        if(quantosValoresNoVetor >= tamanhoVetor){
            System.out.println();
            System.out.println(">>>>>> Vetor completo <<<<<<");
            System.out.println();

        }else{

            vetor[0] = geraAleatorio();

            for(int i = 1; i < tamanhoVetor; i++){
                vetor[i] = (geraAleatorio() + vetor[i - 1]);
            }

            System.out.println();
            System.out.println("Os números aleatórios foram adicionados!!!!");
            System.out.println();
        }

    }

    static void consultaBinario() {
        int inicio, fim, valorConsulta, posicao;

        inicio = 0;
        fim = vetor.length - 1;
        posicao = -1;
        comparadorBin = 0;

        if(quantosValoresNoVetor == 0){
            System.out.println("Não existem valores cadastrados");

        }else {

            System.out.println();
            System.out.print("Insira o valor a ser consultado: ");
            valorConsulta = teclado.nextInt();

            while (inicio <= fim) {
                int meio = (inicio + fim) / 2;

                if (vetor[meio] == valorConsulta) {
                    comparadorBin++;
                    posicao = meio;
                    inicio = (vetor.length + 1);

                } else if (vetor[meio] < valorConsulta) {
                    comparadorBin++;
                    inicio = meio + 1;
                } else {
                    comparadorBin++;
                    fim = meio - 1;
                }
            }

            if (posicao != -1) {
                System.out.println("O valor foi cadastrado na posição " + posicao);
            } else {
                System.out.println("O valor não foi cadastrado");
            }

            System.out.println();
        }
    }

    static void comparaBuscas(){
        System.out.println();
        System.out.println("A busca binária comparou "+ comparadorBin +" vezes");
        System.out.println("A busca sequencial comparou "+ comparadorSeq +" vezes");
        System.out.println("A busca binária com recursividade comparou "+ comparadorRecursivo +" vezes");
        System.out.println();
    }

    static int buscaBinariaRecursiva (int[] valor, int consulta, int inicio, int fim) {
        int meio;

        if (inicio <= fim) {
            meio = (inicio + fim) / 2;

            if (valor[meio] == consulta) {
                comparadorRecursivo++;
                return meio;

            } else if (valor[meio] < consulta) {
                comparadorRecursivo++;
                return buscaBinariaRecursiva(valor, consulta, meio + 1, fim);

            } else {
                comparadorRecursivo++;
                return buscaBinariaRecursiva(valor, consulta, inicio, meio - 1);

            }
        }

        return -1;
    }

    static void buscaRecursividade() {
        int resultado, valorConsulta;

        if(quantosValoresNoVetor == 0){
            System.out.println("Não existem valores cadastrados");

        }else {

            System.out.println();
            System.out.print("Insira o valor a ser consultado: ");
            valorConsulta = teclado.nextInt();

            resultado = buscaBinariaRecursiva(vetor, valorConsulta, 0, vetor.length - 1);

            if (resultado != -1) {
                System.out.println("O valor foi encontrado na posição " + resultado);
            } else {
                System.out.println("O valor não foi encontrado no vetor.");
            }

            System.out.println();
        }
    }

    static void insereAleatorioNaoOrdenado(){
        int aleatorio;

        if(quantosValoresNoVetor >= tamanhoVetor){
            System.out.println();
            System.out.println(">>>>>> Vetor completo <<<<<<");
            System.out.println();

        }else {

            for (int i = 0; i < tamanhoVetor; i++) {
                aleatorio = geraAleatorio();

                if (vetor[i] == 0){
                    vetor[i] = aleatorio;
                    quantosValoresNoVetor++;
                }
            }

            System.out.println();
            System.out.println("Os números aleatórios foram adicionados!!!!");
        }

        System.out.println();
    }

    static void escolheOrdenacao(){
        int [] copia = new int[tamanhoVetor];

        for(int i = 0; i < tamanhoVetor; i++){
            copia[i] = vetor[i];
        }

        int escolha;

        verificaOrdenacao();

        if(ordenado == true){
            System.out.println("O vetor já está ordenado!!");

        }else {

            menuOrdenacao();
            escolha = teclado.nextInt();
            System.out.println();

            switch (escolha) {
                case 1 -> bubbleSort();
                case 2 -> selectionSort();
                case 3 -> insertionSort();
                case 4 -> {
                    quickSort(copia, 0, tamanhoVetor - 1);

                    for (int i = 0; i < tamanhoVetor; i++) {
                        System.out.print("[ " + copia[i] + " ] ");

                    }
                }
                default -> System.out.println("\nOpção inválida. Tente novamente\n");
            }
            System.out.println();
        }
    }

    static void bubbleSort(){
        int [] copia = new int[tamanhoVetor];
        int ultimo, aux;
        comparadorBubble = 0;

        for(int i = 0; i < tamanhoVetor; i++){
            copia[i] = vetor[i];
        }

        for (ultimo = (copia.length - 1); ultimo > 0; ultimo--){
            for(int i = 0; i < ultimo; i++){
                if(copia[i] > copia[i+1]){
                    aux = copia[i];
                    copia[i] = copia[i + 1];
                    copia[i + 1] = aux;

                    comparadorBubble++;
                }
            }
        }

        for (int i = 0; i < tamanhoVetor; i++){
            System.out.print("[ "+ copia[i]+" ] ");
        }

        System.out.println();
    }

    static void selectionSort(){
        int [] copia = new int[tamanhoVetor];
        int menor, aux;
        comparadorSelection = 0;

        for (int i = 0; i < tamanhoVetor; i++){
            copia[i] = vetor[i];
        }

        for (int i = 0; i < tamanhoVetor; i++){
            menor = i;

            for (int j = 0; j < tamanhoVetor; j++){
                if(copia[j] > copia[menor]){
                    aux = copia[j];
                    copia[j] = copia[menor];
                    copia[menor] = aux;

                    comparadorSelection++;
                }
            }
        }

        for (int i = 0; i < tamanhoVetor; i++){
            System.out.print("[ "+ copia[i]+" ] ");
        }

        System.out.println();
    }

    static void insertionSort(){
        int [] copia = new int[tamanhoVetor];
        int inicio, aux;
        comparadorInsert = 0;

        for (int i = 0; i < tamanhoVetor; i++){
            copia[i] = vetor[i];
        }

        for (int i = 1; i < tamanhoVetor; i++){
            aux = copia[i];
            inicio = i - 1;

            while((inicio >= 0) && (copia[inicio] > aux)){
                copia[inicio + 1] = copia[inicio];
                inicio = inicio - 1;

                comparadorInsert++;
            }

            copia[inicio + 1] = aux;

        }

        for (int i = 0; i < tamanhoVetor; i++){
            System.out.print("[ "+ copia[i]+" ] ");
        }

        System.out.println();
    }

    static void quickSort(int [] copia, int baixo, int alto){
        int pivo;

        if(baixo < alto){
            pivo = participation(copia, baixo, alto);

            quickSort(copia, baixo,  pivo - 1);
            quickSort(copia, baixo + 1, alto);
        }
    }

    static int participation(int [] copia, int baixo, int alto) {
        int pivo, aux, troca, subs;
        comparadorQuick = 0;

        pivo = copia[alto];
        aux = (baixo - 1);

        for(int i = baixo; i <= alto; i++){
            if(copia[i] < pivo){
                aux++;

                troca = copia[aux];
                copia[aux] = copia[i];
                copia[i] = troca;

                comparadorQuick++;
            }
        }

        subs = copia[aux + 1];
        copia[aux + 1] = copia[alto];
        copia[alto] = subs;

        comparadorQuick++;

        return aux + 1;

    }

    static void menuOrdenacao() {
        System.out.println(">>>>>>>>>> Ordenação <<<<<<<<<<<");
        System.out.println("1) BubbleSort");
        System.out.println("2) SelectionSort");
        System.out.println("3) InsertionSort");
        System.out.println("4) QuickSort");
        System.out.print("Escolha: ");
    }

    static int geraAleatorio(){
        int numeroAleatorio;

        numeroAleatorio = numAleatorio.nextInt(10000);

        return numeroAleatorio;
    }

    static void verificaOrdenacao(){
        int controle = 0;

        for (int i = 0; i < (tamanhoVetor - 1); i++){
            if(vetor[i] > vetor[i + 1]){
                controle++;
            }
        }

        if(controle != 0){
            ordenado = false;
        }else{
            ordenado = true;
        }
    }

    static void encerraPrograma() {
        System.out.println();
        System.out.println("Sistema encerrado");
    }
}
